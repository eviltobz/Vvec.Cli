<Project Sdk="Microsoft.NET.Sdk">

	<PropertyGroup>
		<!-- ğŸ‘‡ Source generators must target netstandard 2.0 -->
		<TargetFramework>netstandard2.0</TargetFramework>
		<!-- ğŸ‘‡ We don't want to reference the source generator dll directly in consuming projects -->
		<IncludeBuildOutput>false</IncludeBuildOutput>
		<!-- ğŸ‘‡ New project, why not! -->
		<Nullable>enable</Nullable>
		<ImplicitUsings>true</ImplicitUsings>
		<LangVersion>Latest</LangVersion>
		<EnforceExtendedAnalyzerRules>true</EnforceExtendedAnalyzerRules>


		<!-- ğŸ‘‡ Something needed for debugging source generators
		  * Open properties for SourceGen project in Solution Explorer
		  * Go to Debug > Open debug launch profiles UI
		  * Delete existing profile and add a new Roslyn Component one
		  * Point it to the project using the SourceGen to debug with
		  * Set Generator as startup project
		  * Debuggerise
		  ( * Maybe tweak launchSettings.json to taste)
		-->
		<IsRoslynComponent>true</IsRoslynComponent>
	</PropertyGroup>

	<!-- The following libraries include the source generator interfaces and types we need -->
	<ItemGroup>
		<PackageReference Include="Microsoft.CodeAnalysis.Analyzers" Version="3.3.4" PrivateAssets="all" />
		<PackageReference Include="Microsoft.CodeAnalysis.CSharp" Version="4.0.1" PrivateAssets="all" />
	</ItemGroup>

	<!-- This ensures the library will be packaged as a source generator when we use `dotnet pack` -->
	<ItemGroup>
		<None Include="$(OutputPath)\$(AssemblyName).dll" Pack="true" PackagePath="analyzers/dotnet/cs" Visible="false" />
	</ItemGroup>
</Project>
